diff --git a/sim/tcp.cpp b/sim/tcp.cpp
index 45b54d3..664561b 100755
--- a/sim/tcp.cpp
+++ b/sim/tcp.cpp
@@ -185,6 +185,15 @@ TcpSrc::receivePacket(Packet& pkt)
 
     if (seqno >= _flow_size){
         cout << "Flow " << nodename() << " finished at " << timeAsMs(eventlist().now()) << endl;        
+        // AstraSim entry point
+        // Use IDs memorized at point of adding the flow, as well as unique src tag for the transition
+        if (astrasim_flow_finish_send_cb) {
+            int tag = _flow.flow_id();
+            int src_id = _debug_srcid;
+            int dst_id = _debug_dstid;
+            std::cout << "Finish sending flow " << tag << " from " << src_id << " to " << dst_id << std::endl;
+            astrasim_flow_finish_send_cb(src_id, dst_id, _flow_size, tag);
+        }
     }
   
     if (seqno > _last_acked) { // a brand new ack
@@ -681,6 +690,17 @@ TcpSink::receivePacket(Packet& pkt) {
             }
         }
     }
+
+    // AstraSim entry point
+    // Use IDs memorized at point of adding the flow, as well as unique src tag for the transition
+    if (_cumulative_ack >= _src->_flow_size && astrasim_flow_finish_recv_cb) {
+        int tag = _src->getFlowId();
+        int src_id = _debug_srcid;
+        int dst_id = _debug_dstid;
+        std::cout << "Finish receiving flow " << tag << " from " << src_id << " to " << dst_id << std::endl;
+        astrasim_flow_finish_recv_cb(src_id, dst_id, _src->_flow_size, tag);
+    }
+
     send_ack(ts,marked);
 }
 
diff --git a/sim/tcp.h b/sim/tcp.h
index 127bbdb..3c97422 100755
--- a/sim/tcp.h
+++ b/sim/tcp.h
@@ -44,10 +44,9 @@ public:
 
     void set_flowsize(uint64_t flow_size_in_bytes) {
         _flow_size = flow_size_in_bytes+_mss;
-        cout << "Setting flow size to " << _flow_size << endl;
+        // cout << "Setting flow size to " << _flow_size << endl;
     }
     flowid_t getFlowId() {return _flow.flow_id();}
-    
     void set_ssthresh(uint64_t s){_ssthresh = s;}
     void set_cwnd(uint64_t s){_cwnd = s;}
     void set_dst(int d){_dst=d;}
@@ -137,6 +136,12 @@ private:
     //void clearWhen(TcpAck::seq_t from, TcpAck::seq_t to);
     //void showWhen (int from, int to);
     string _nodename;
+    public:
+        // for AstraSim
+        inline void setFlowId(flowid_t flow_id) { _flow.set_flowid(flow_id); }
+        void (*astrasim_flow_finish_send_cb)(int, int, int, int) = nullptr;
+        int _debug_srcid = -1;
+        int _debug_dstid = -1;
 };
 
 class TcpSink : public PacketSink, public DataReceiver {
@@ -180,6 +185,12 @@ private:
     void send_ack(simtime_picosec ts,bool marked);
 
     string _nodename;
+    public:
+    // for AstraSim
+    inline void setFlowId(flowid_t flow_id) { _src->_flow.set_flowid(flow_id); }
+    void (*astrasim_flow_finish_recv_cb)(int, int, int, int) = nullptr;
+    int _debug_srcid = -1;
+    int _debug_dstid = -1;
 };
 
 class TcpRtxTimerScanner : public EventSource {
